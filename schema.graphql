interface UserTransaction {
  id: ID!
  pool: Pool!
  user: User!
  timestamp: Int!
}

type Deposit implements UserTransaction @entity {
  id: ID!
  pool: Pool!
  user: User!
  caller: User!
  reserve: Reserve!
  userReserve: UserReserve!
  amount: BigInt!
  referrer: Referrer
  timestamp: Int!
}

type Withdraw implements UserTransaction @entity {
  id: ID!
  pool: Pool!
  user: User!
  to: User!
  reserve: Reserve!
  userReserve: UserReserve!
  amount: BigInt!
  timestamp: Int!
}

type Borrow implements UserTransaction @entity {
  id: ID!
  pool: Pool!
  user: User!
  caller: User!
  reserve: Reserve!
  userReserve: UserReserve!
  amount: BigInt!
  borrowRate: BigInt!
  borrowRateMode: BorrowRateMode!
  referrer: Referrer
  timestamp: Int!
  dTokenDebt: BigInt!
}

type Repay implements UserTransaction @entity {
  id: ID!
  pool: Pool!
  user: User!
  repayer: User!
  reserve: Reserve!
  userReserve: UserReserve!
  amount: BigInt!
  timestamp: Int!
}

type UsageAsCollateral implements UserTransaction @entity {
  id: ID!
  pool: Pool!
  user: User!
  reserve: Reserve!
  userReserve: UserReserve!
  fromState: Boolean!
  toState: Boolean!
  timestamp: Int!
}

type LiquidationCall implements UserTransaction @entity {
  id: ID!
  pool: Pool!
  user: User!
  collateralReserve: Reserve!
  collateralUserReserve: UserReserve!
  collateralAmount: BigInt!
  principalReserve: Reserve!
  principalUserReserve: UserReserve!
  principalAmount: BigInt!
  liquidator: Bytes!
  timestamp: Int!
}

type KTokenBalanceHistoryItem @entity {
  id: ID!
  userReserve: UserReserve!
  timestamp: Int!
  scaledKTokenBalance: BigInt!
  currentKTokenBalance: BigInt!
  index: BigInt!
}

type DTokenBalanceHistoryItem @entity {
  id: ID!
  userReserve: UserReserve!
  scaledVariableDebt: BigInt!
  currentVariableDebt: BigInt!
  timestamp: Int!
  index: BigInt!
}

type Reserve @entity {
  id: ID!
  underlyingAsset: Bytes!
  pool: Pool!
  symbol: String!
  name: String!

  decimals: Int!
  usageAsCollateralEnabled: Boolean! # defalt false
  borrowingEnabled: Boolean! # defalt false
  isActive: Boolean! # defalt false
  isFrozen: Boolean! # defalt false

  reserveInterestRateStrategy: Bytes!
  optimalUtilisationRate: BigInt!
  variableRateSlope1: BigInt!
  variableRateSlope2: BigInt!
  baseLTVasCollateral: BigInt!
  reserveLiquidationThreshold: BigInt!
  reserveLiquidationBonus: BigInt!
  utilizationRate: BigDecimal! # default: 0
  totalLiquidity: BigInt! # default: 0
  totalKTokenSupply: BigInt!
  totalLiquidityAsCollateral: BigInt! # default: 0
  availableLiquidity: BigInt! # default: 0
  totalScaledVariableDebt: BigInt! # default: 0
  totalCurrentVariableDebt: BigInt! # default: 0
  totalDeposits: BigInt! # default: 0
  liquidityRate: BigInt! # depositors interest
  variableBorrowRate: BigInt!
  liquidityIndex: BigInt!
  variableBorrowIndex: BigInt!
  kToken: KToken!
  dToken: DToken!
  reserveFactor: BigInt! #default 0
  lastUpdateTimestamp: Int!

  lifetimeLiquidity: BigInt! # default: 0
  lifetimeScaledVariableDebt: BigInt! # default: 0
  lifetimeCurrentVariableDebt: BigInt! # default: 0
  lifetimeRepayments: BigInt! # default: 0
  lifetimeWithdrawals: BigInt! # default: 0
  lifetimeBorrows: BigInt! # default: 0
  lifetimeLiquidated: BigInt! # default: 0
  lifetimeDepositorsInterestEarned: BigInt!
  lifetimeReserveFactorAccrued: BigInt!

  userReserves: [UserReserve!]! @derivedFrom(field: "reserve")
  depositHistory: [Deposit!]! @derivedFrom(field: "reserve")
  withdrawHistory: [Withdraw!]! @derivedFrom(field: "reserve")
  borrowHistory: [Borrow!]! @derivedFrom(field: "reserve")
  usageAsCollateralHistory: [UsageAsCollateral!]! @derivedFrom(field: "reserve")
  repayHistory: [Repay!]! @derivedFrom(field: "reserve")
  liquidationCallHistory: [LiquidationCall!]! @derivedFrom(field: "collateralReserve")
  configurationHistory: [ReserveConfigurationHistoryItem!]! @derivedFrom(field: "reserve")
  deposits: [Deposit!]! @derivedFrom(field: "reserve")
}

type UserReserve @entity {
  id: ID!
  pool: Pool!
  reserve: Reserve!
  user: User!
  usageAsCollateralEnabledOnUser: Boolean!
  scaledKTokenBalance: BigInt!
  currentKTokenBalance: BigInt!
  scaledVariableDebt: BigInt!
  currentVariableDebt: BigInt!
  currentTotalDebt: BigInt!
  liquidityRate: BigInt!
  variableBorrowIndex: BigInt!

  lastUpdateTimestamp: Int!
  kTokenBalanceHistory: [KTokenBalanceHistoryItem!]! @derivedFrom(field: "userReserve")
  dTokenBalanceHistory: [DTokenBalanceHistoryItem!]! @derivedFrom(field: "userReserve")
  
  usageAsCollateralHistory: [UsageAsCollateral!]! @derivedFrom(field: "userReserve")
  depositHistory: [Deposit!]! @derivedFrom(field: "userReserve")
  withdrawHistory: [Withdraw!]! @derivedFrom(field: "userReserve")
  borrowHistory: [Borrow!]! @derivedFrom(field: "userReserve")
  swapHistory: [Swap!]! @derivedFrom(field: "userReserve")
  repayHistory: [Repay!]! @derivedFrom(field: "userReserve")
  liquidationCallHistory: [LiquidationCall!]! @derivedFrom(field: "collateralUserReserve")
}

type User @entity {
  id: ID!
  borrowedReservesCount: Int!

  role: [PermissionedRole!]! @derivedFrom(field: "user")

  reserves: [UserReserve!]! @derivedFrom(field: "user")
  depositHistory: [Deposit!]! @derivedFrom(field: "user")
  withdrawHistory: [Withdraw!]! @derivedFrom(field: "user")
  usageAsCollateralHistory: [UsageAsCollateral!]! @derivedFrom(field: "user")
  borrowHistory: [Borrow!]! @derivedFrom(field: "user")
  swapHistory: [Swap!]! @derivedFrom(field: "user")
  repayHistory: [Repay!]! @derivedFrom(field: "user")
  liquidationCallHistory: [LiquidationCall!]! @derivedFrom(field: "user")
}